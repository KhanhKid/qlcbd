<div class="block">
    <h2 class="title">Tổ chức cơ cấu Thành Đoàn</h2>
    
    <div class="block-content" id="js-hire-tree">

    </div>
</div>
<?php  // var_dump(json_encode($this->jsTreeData)); die();
    /*$data = array();
    foreach ($this->danhsach as $ban){
        $data[] = array(
            'name' => $ban['Ten_Ban'],
            'children' => array(
                array(
                    'name' => 'Nguyễn Văn A'
                ),
                array(
                    'name' => 'Trần Văn B'
                ),
            )
        );
}*/
?>
<script>

    var treeData = [
    {
        "name": "THÀNH ĐOÀN",
        "parent": "null",
        "children": <?php echo json_encode($this->data); ?>
    }
    ];

    // ************** Generate the tree diagram  *****************
    var margin = {top: 20, right: 120, bottom: 20, left: 120},
    width = 500;
    height = 30 * <?php echo $this->countResult; ?>;
    /*width = 960 - margin.right - margin.left,
    height = 500 - margin.top - margin.bottom;*/

    var i = 0;

    var tree = d3.layout.tree()
    .size([height, width]);

    var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

    var svg = d3.select(".block-content").append("svg")
    .attr("width", width + margin.right + margin.left)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    root = treeData[0];

    update(root);

    function update(source) {

        // Compute the new tree layout.
        var nodes = tree.nodes(root).reverse(),
        links = tree.links(nodes);

        // Normalize for fixed-depth.
        nodes.forEach(function(d) { d.y = d.depth * 180; });

        // Declare the nodes
        var node = svg.selectAll("g.node")
        .data(nodes, function(d) { return d.id || (d.id = ++i); });

        // Enter the nodes.
        var nodeEnter = node.enter().append("g")
        .attr("class", "node")
        .attr("transform", function(d) {
            return "translate(" + d.y + "," + d.x + ")"; });

        nodeEnter.append("circle")
        .attr("r", 5)
        .style("fill", "#fff");

        nodeEnter.append("text")
        .attr("dx", function(d) {
            if (d.name == 'THÀNH ĐOÀN') {
                return "-2em";
            }
            else 
                return d.children || d._children ? "0em" : "1em"; 
        })
        .attr("dy", function(d) {
            if (d.name == 'THÀNH ĐOÀN'){
                return '0.35em';
            }
            else{
                return (d.children || d._children) ? "-0.35em" : "0.35em"; }
        })
        .attr("text-anchor", function(d) {
            return d.children || d._children ? "end" : "start"; 
        })
        .attr("id", function(d) {
            if (d.id !== null && typeof(d.id) !== 'undefined')
                return d.id;
        })
        .text(function(d) { return d.name; })
        .style("fill-opacity", 1)
        .style("font-weight", function(d) {
            if(d.name == 'THÀNH ĐOÀN') {
                return "bold";
            }
            else
                return (d.children || d._children) ? "bold" : "lighter";
        })
        .style("color", function(d) {
            return (d.name == 'THÀNH ĐOÀN') ? "blue" : "black";
        })
        .call(wrap, 200);

        var link = svg.selectAll("path.link")
        .data(links, function(d) { return d.target.id; });

        // Enter the links.
        link.enter().insert("path", "g")
        .attr("class", "link")
        .attr("d", diagonal);

    }

    function wrap(text, width) {
      text.each(function() {
        var text = d3.select(this),
            words = text.text().split(/\s+/).reverse(),
            word,
            line = [],
            lineNumber = 0,
            lineHeight = 1.6, // ems
            y = text.attr("y"),
            dy = parseFloat(text.attr("dy")),
            tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
        while (word = words.pop()) {
          line.push(word);
          tspan.text(line.join(" "));
          if (tspan.node().getComputedTextLength() > width) {
            line.pop();
            tspan.text(line.join(" "));
            line = [word];
            tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", lineHeight + dy + "em").text(word);
          }
        }
      });
    }
</script>
<link rel="stylesheet" href="<?php echo ROOT_PATH . 'public/script/themes/default/style.min.css'; ?>" type="text/css">